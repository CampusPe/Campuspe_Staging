# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy TypeScript API to Azure - campuspe-api-staging

on:
  push:
    branches:
      - main
    paths:
      - "apps/api/**"
      - ".github/workflows/main_campuspe-api-staging.yml"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install root dependencies
        run: npm install

      - name: Install API dependencies
        working-directory: ./apps/api
        run: |
          echo "üì¶ Installing all dependencies (including dev dependencies for build)..."
          npm install
          echo "‚úÖ Dependencies installed"

      - name: Build TypeScript API
        working-directory: ./apps/api
        run: |
          echo "üî® Building TypeScript API..."
          echo "üìã Verifying TypeScript and type dependencies..."
          npx tsc --version
          echo "‚úÖ TypeScript version verified"
          npm run build:prod
          echo "‚úÖ Build completed. Verifying build artifacts..."
          ls -la dist/
          echo "Main entry point: $([ -f dist/app.js ] && echo 'app.js EXISTS' || echo 'app.js MISSING')"

      - name: Create optimized deployment package
        run: |
          echo "üì¶ Creating API deployment package..."
          mkdir -p deployment-package

          # Copy build artifacts
          echo "üìÅ Copying build artifacts..."
          cp -r apps/api/dist deployment-package/

          # Copy essential files
          echo "üìÑ Copying essential application files..."
          cp apps/api/package.json deployment-package/
          cp apps/api/package-lock.json deployment-package/
          cp apps/api/.deployment deployment-package/ || echo "No .deployment found"
          cp apps/api/tsconfig.json deployment-package/ || echo "No tsconfig.json found"
          cp apps/api/tsconfig.build.json deployment-package/ || echo "No tsconfig.build.json found"

          # Copy startup and server files
          echo "üöÄ Copying startup files..."
          cp apps/api/server.js deployment-package/
          cp apps/api/startup.sh deployment-package/
          cp apps/api/web.config deployment-package/ || echo "No web.config found"

          # Make scripts executable
          echo "‚öôÔ∏è  Making scripts executable..."
          chmod +x deployment-package/server.js deployment-package/startup.sh

          # Install production dependencies
          echo "üì• Installing production dependencies..."
          cd deployment-package
          npm install --omit=dev --silent
          cd ..

          echo "‚úÖ Deployment package created successfully!"
          echo "üìã Package verification:"
          echo "‚úì Build: $([ -f deployment-package/dist/app.js ] && echo 'EXISTS' || echo 'MISSING')"
          echo "‚úì Server: $([ -f deployment-package/server.js ] && echo 'EXISTS' || echo 'MISSING')"
          echo "‚úì Startup: $([ -f deployment-package/startup.sh ] && echo 'EXISTS' || echo 'MISSING')"
          echo "‚úì Package: $([ -f deployment-package/package.json ] && echo 'EXISTS' || echo 'MISSING')"
          echo "‚úì Dependencies: $([ -d deployment-package/node_modules ] && echo 'EXISTS' || echo 'MISSING')"
          echo ""
          echo "üìã Package contents:"
          ls -la deployment-package/

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: api-app
          path: deployment-package

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: api-app

      - name: Verify deployment package before deploy
        run: |
          echo "üîç Verifying API deployment package..."
          ls -la
          echo ""
          echo "üìã Critical files check:"
          echo "‚úì Build: $([ -f dist/app.js ] && echo 'EXISTS' || echo 'MISSING')"
          echo "‚úì Server: $([ -f server.js ] && echo 'EXISTS' || echo 'MISSING')"
          echo "‚úì Startup: $([ -f startup.sh ] && echo 'EXISTS' || echo 'MISSING')"
          echo "‚úì Package: $([ -f package.json ] && echo 'EXISTS' || echo 'MISSING')"
          echo "‚úì Dependencies: $([ -d node_modules ] && echo 'EXISTS' || echo 'MISSING')"

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_8A6DED1EC9FF4D6DBF9BC09565C923D6 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_6F962B613A624D3582F2985BCDA08CE8 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_AE3ECD9C02CC4AD296820DF8B2D5C91F }}

      - name: "Deploy to Azure Web App"
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: "campuspe-api-staging"
          slot-name: "Production"
          package: .

      - name: Post-deployment verification
        run: |
          echo "üéâ API deployment completed successfully!"
          echo ""
          echo "üåê API URL: https://campuspe-api-staging-hmfjgud5c6a7exe9.southindia-01.azurewebsites.net"
          echo ""
          echo "üìä Deployment Summary:"
          echo "‚Ä¢ Environment: Production"
          echo "‚Ä¢ Node.js Version: 20.x"
          echo "‚Ä¢ Framework: Express.js + TypeScript"
          echo "‚Ä¢ Startup Command: startup.sh"
          echo ""
          echo "üîß Required Azure Environment Variables:"
          echo "‚Ä¢ PORT=8080"
          echo "‚Ä¢ NODE_ENV=production"
          echo "‚Ä¢ MONGODB_URI=<your-mongodb-connection-string>"
          echo "‚Ä¢ JWT_SECRET=<your-jwt-secret>"
          echo "‚Ä¢ WEBSITES_ENABLE_APP_SERVICE_STORAGE=false"
          echo ""
          echo "üö® If the API doesn't start, check:"
          echo "1. Azure Portal ‚Üí campuspe-api-staging ‚Üí Log stream"
          echo "2. Ensure all environment variables are set"
          echo "3. Verify startup command is set to: startup.sh"
          echo "4. Test API health: curl https://campuspe-api-staging-hmfjgud5c6a7exe9.southindia-01.azurewebsites.net/api/health"
