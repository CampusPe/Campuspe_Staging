# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Web to Azure Web App - campuspe-web-staging

on:
  push:
    branches:
      - main
    paths:
      - "apps/web/**"
      - ".github/workflows/main_campuspe-web-staging.yml"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install root dependencies
        run: npm ci

      - name: Install Web dependencies
        working-directory: ./apps/web
        run: npm ci

      - name: Build Web
        working-directory: ./apps/web
        run: npm run build

      - name: Create deployment package
        run: |
          mkdir -p deployment-package
          # Copy essential files only
          cp -r apps/web/.next deployment-package/
          cp -r apps/web/public deployment-package/
          cp apps/web/package.json deployment-package/
          cp apps/web/package-lock.json deployment-package/
          cp apps/web/server-azure.js deployment-package/
          cp apps/web/server-azure-debug.js deployment-package/
          cp apps/web/next.config.js deployment-package/
          # Copy optional files
          cp apps/web/web.config deployment-package/ 2>/dev/null || echo "web.config not found, skipping"
          cp apps/web/.env.production deployment-package/ 2>/dev/null || echo ".env.production not found, skipping"
          
          # Create a simple startup script for Azure
          cat > deployment-package/startup.sh << 'EOF'
          #!/bin/bash
          set -e
          cd "$(dirname "$0")"
          echo "Starting CampusPe Web Application..."
          export NODE_ENV=production
          export PORT="${PORT:-8080}"
          echo "Environment: NODE_ENV=$NODE_ENV, PORT=$PORT"
          # Install production dependencies if node_modules is missing
          if [ ! -d "node_modules" ]; then
            echo "Installing production dependencies..."
            npm ci --only=production
          fi
          echo "Starting Azure diagnostic server..."
          exec node server-azure-debug.js
          EOF
          
          chmod +x deployment-package/startup.sh
          
          # List contents for debugging
          echo "Deployment package contents:"
          ls -la deployment-package/

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: web-app
          path: deployment-package

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: web-app

      - name: Debug deployment package
        run: |
          echo "Current directory contents:"
          ls -la
          echo "Package size:"
          du -sh .
          echo "Checking for required files:"
          test -f package.json && echo "✓ package.json found" || echo "✗ package.json missing"
          test -f server-azure.js && echo "✓ server-azure.js found" || echo "✗ server-azure.js missing"
          test -d .next && echo "✓ .next directory found" || echo "✗ .next directory missing"
          test -f startup.sh && echo "✓ startup.sh found" || echo "✗ startup.sh missing"
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_78049047CCB2468AB61906BC91B9D5E2 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_7EDEB41DD16F4709823C929CC48C8894 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_244A34706AC845219DF909AE50BA9009 }}

      - name: "Deploy to Azure Web App"
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: "campuspe-web-staging"
          slot-name: "Production"
          package: .
          startup-command: './startup.sh'